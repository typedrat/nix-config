name: Build NixOS Systems

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch: # allows manual triggering

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Individual build job for each machine - creates separate status checks
  build:
    name: Build ${{ matrix.machine.host }} (${{ matrix.machine.platform }})
    runs-on: nixos
    strategy:
      fail-fast: false
      # Each matrix entry becomes a separate status check
      matrix:
        machine:
          - host: hyperion
            platform: x86-64-linux
          - host: iserlohn
            platform: x86-64-linux

    steps:
      - uses: actions/checkout@v4

      # Configure SSH key for Git operations
      - name: Configure SSH key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # We build each system in a separate job, targeting the configuration using matrix.machine.host
      # Once built, we login to Attic and push the built system to our `system` cache!
      - name: Build and push ${{ matrix.machine.host }}
        run: |
          nix build .#nixosConfigurations.${{ matrix.machine.host }}.config.system.build.toplevel
          nix run github:zhaofengli/attic#default login system https://attic.thisratis.gay ${{ secrets.ATTIC_TOKEN }}
          nix run github:zhaofengli/attic#default push system result -j 2

  # Optional: Summary job that depends on all builds
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build
    if: always() # Run even if some builds fail

    steps:
      - name: Check build results
        run: |
          echo "Build results:"
          echo "- hyperion: ${{ needs.build.outputs.hyperion-status || 'unknown' }}"
          echo "- iserlohn: ${{ needs.build.outputs.iserlohn-status || 'unknown' }}"

          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ All systems built successfully!"
          else
            echo "❌ Some systems failed to build"
            echo "Overall result: ${{ needs.build.result }}"
            exit 1
          fi
