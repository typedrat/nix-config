name: Update Shoko dev builds

on:
  workflow_dispatch: # allows manual triggering
  schedule:
    - cron: "0 6 * * *" # runs daily at 6 AM UTC

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure SSH key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@v3

      - name: Check for Shoko Server updates
        id: check-server
        run: |
          # Get latest dev tag from ShokoServer repository
          latest_server_version=$(curl -s "https://api.github.com/repos/ShokoAnime/ShokoServer/tags" | \
            jq -r '[.[] | select(.name | test(".*-dev\\.[0-9]+$")) | .name] | sort_by([split(".") | map(split("-") | map(tonumber? // .))]) | last' | \
            sed 's/^v//')
          
          echo "Latest server version: $latest_server_version"
          
          # Get current version from Nix file
          current_server_version=$(grep 'version = ' pkgs/shoko-dev/package.nix | sed -E 's/.*"([^"]+)".*/\1/')
          
          echo "Current server version: $current_server_version"
          
          if [[ "$latest_server_version" != "$current_server_version" ]]; then
            echo "Server update needed!"
            echo "server_update_needed=true" >> $GITHUB_OUTPUT
            echo "new_server_version=$latest_server_version" >> $GITHUB_OUTPUT
          else
            echo "No server update needed"
            echo "server_update_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for Shoko WebUI updates
        id: check-webui
        run: |
          # Get latest dev tag from Shoko-WebUI repository
          latest_webui_version=$(curl -s "https://api.github.com/repos/ShokoAnime/Shoko-WebUI/tags" | \
            jq -r '[.[] | select(.name | test(".*-dev\\.[0-9]+$")) | .name] | sort_by([split(".") | map(split("-") | map(tonumber? // .))]) | last' | \
            sed 's/^v//')
          
          echo "Latest webui version: $latest_webui_version"
          
          # Get current version from Nix file
          current_webui_version=$(grep 'version = ' pkgs/shoko-webui-dev/package.nix | sed -E 's/.*"([^"]+)".*/\1/')
          
          echo "Current webui version: $current_webui_version"
          
          if [[ "$latest_webui_version" != "$current_webui_version" ]]; then
            echo "WebUI update needed!"
            echo "webui_update_needed=true" >> $GITHUB_OUTPUT
            echo "new_webui_version=$latest_webui_version" >> $GITHUB_OUTPUT
          else
            echo "No webui update needed"
            echo "webui_update_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Update Shoko Server
        if: steps.check-server.outputs.server_update_needed == 'true'
        run: |
          # Update version in package.nix
          sed -i 's/version = "[^"]*"/version = "${{ steps.check-server.outputs.new_server_version }}"/' pkgs/shoko-dev/package.nix
          
          # Calculate new source hash
          new_hash=$(nix run nixpkgs#nix-prefetch-github -- ShokoAnime ShokoServer --rev "v${{ steps.check-server.outputs.new_server_version }}" | jq -r '.hash')
          
          # Update source hash
          sed -i "s|hash = \"[^\"]*\"|hash = \"$new_hash\"|" pkgs/shoko-dev/package.nix
          
          # Regenerate NuGet dependencies
          cd pkgs/shoko-dev
          nix build .#shoko-dev.fetch-deps --no-link
          nix build .#shoko-dev.fetch-deps -o deps-result
          cp deps-result deps.json
          rm deps-result
          cd ../..
          
          echo "Updated Shoko Server to ${{ steps.check-server.outputs.new_server_version }}"

      - name: Update Shoko WebUI
        if: steps.check-webui.outputs.webui_update_needed == 'true'
        run: |
          # Update version in package.nix
          sed -i 's/version = "[^"]*"/version = "${{ steps.check-webui.outputs.new_webui_version }}"/' pkgs/shoko-webui-dev/package.nix
          
          # Calculate new source hash with Git context preserved
          source_hash=$(nix run nixpkgs#nix-prefetch-github -- ShokoAnime Shoko-WebUI --rev "v${{ steps.check-webui.outputs.new_webui_version }}" --leave-dot-git | jq -r '.hash')
          
          # Update source hash (first occurrence only - the main source)
          sed -i "0,/hash = /{s|hash = \"[^\"]*\"|hash = \"$source_hash\"|}" pkgs/shoko-webui-dev/package.nix
          sed -i "0,/hash = lib\.fakeHash/{s|hash = lib\.fakeHash|hash = \"$source_hash\"|}" pkgs/shoko-webui-dev/package.nix
          
          # Set pnpm deps hash to lib.fakeHash initially
          sed -i "/pnpmDeps = pnpm\.fetchDeps/,/};/ s/hash = \"[^\"]*\"/hash = lib.fakeHash/" pkgs/shoko-webui-dev/package.nix
          
          # Build to get the correct pnpm deps hash from error message
          build_output=$(nix build .#shoko-webui-dev --no-link 2>&1 || true)
          
          if echo "$build_output" | grep -q "got:.*sha256-"; then
            # Extract the expected hash from the error message
            correct_hash=$(echo "$build_output" | grep "got:" | sed -n 's/.*got: *\(sha256-[A-Za-z0-9+/=]*\).*/\1/p')
            
            if [[ -n "$correct_hash" ]]; then
              echo "Found correct pnpm deps hash: $correct_hash"
              # Update the pnpm deps hash with the correct value
              sed -i "/pnpmDeps = pnpm\.fetchDeps/,/};/ s|hash = lib\.fakeHash|hash = \"$correct_hash\"|" pkgs/shoko-webui-dev/package.nix
              
              # Verify the fix by building again
              nix build .#shoko-webui-dev --no-link
            fi
          fi
          
          echo "Updated Shoko WebUI to ${{ steps.check-webui.outputs.new_webui_version }}"

      - name: Create Pull Request
        if: steps.check-server.outputs.server_update_needed == 'true' || steps.check-webui.outputs.webui_update_needed == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GH_TOKEN_FOR_UPDATES }}
          commit-message: |
            Update Shoko dev builds
            ${{ steps.check-server.outputs.server_update_needed == 'true' && format('- Server: {0}', steps.check-server.outputs.new_server_version) || '' }}
            ${{ steps.check-webui.outputs.webui_update_needed == 'true' && format('- WebUI: {0}', steps.check-webui.outputs.new_webui_version) || '' }}
          title: "Update Shoko dev builds"
          body: |
            Automated update of Shoko development builds.
            
            ${{ steps.check-server.outputs.server_update_needed == 'true' && format('- **Server**: {0}', steps.check-server.outputs.new_server_version) || '' }}
            ${{ steps.check-webui.outputs.webui_update_needed == 'true' && format('- **WebUI**: {0}', steps.check-webui.outputs.new_webui_version) || '' }}
            
            These updates were automatically detected from the upstream repositories.
          branch: update-shoko-dev-builds
          labels: automerge